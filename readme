--------------2017-11-3------------------------------------------
npm install --save-dev webpack
npm init   (package.json)


--------------2017-11-2------------------------------------------
因为js中运用了import/export, 浏览器不能识别, 需要对代码进行转码---babel,
不过箭头函数不用转码浏览器也能识别.

网页中实时将ES6代码转为ES5，对性能会有影响。生产环境需要加载已经转码完成的脚本,
使用webpack对代码进行打包,将打包后的文件引入html文件.

--------------2017-11-1--------------------------------------
现在对昨天的工作进行优化, 昨天项目用了一个addLoadEvent函数来将水平运动和圆周运动
函数添加....;  优化思想如下:
    图形绘制工具模块(shapeUtil.js): 通过参数来完成各种图形的绘制.
    运动实现模块(move.js)   : 通过传参数给util.js模块获取要绘制的图形,完成动画.
    动画加载模块(index.js): 通过addLoadEvent函数加载动画函数.
    数据运算模块(util.js)   : 根据动画需要计算位置变换后的坐标等数据.



--------------2017-10-31--------------------------------------
学习Canvas过程中莫名的想做一个画板,初始的想法如下:

绘图工具: 浏览器
绘制方法: 通过选择框输入想要画的图形, 鼠标双击图形可以编辑图形(颜色/大小等属性)
         鼠标点击边框并拖动可以改变图形的大小, 鼠标点击图形任意位置可以拖动图形.
目标一 : 添加一个矩形, 实现拖动改变图形位置.

实现步骤:
<1>. 在画板上初始化一个矩形;
<2>. 为画板上的矩形添加事件监听器;
<3>. 拖动鼠标改变矩形在画板中的位置.

问题分析:
    通过对比svg与canvas(http://www.w3school.com.cn/html5/html_5_canvas_vs_svg.asp),
   决定放弃使用canvas实现画板, 相比之下svg更捷.
   Canvas特点:
            .依赖分辨率
            .不支持事件处理器
            .弱文本渲染能力
            .能够以png/jpg格式保存图像
            .最适合图像密集型的游戏, 其中的许多对象会被频繁的重绘制.

          综上, Canvas可以实现自己想做的动画.

---------------------------------
动画制作步骤:
    .初始化对象
    .更新对象
    .清除画布
    .重绘对象

测试1: 一个小球围绕一个中心点做圆周运动.
    实现步骤:
        .绘制一个实心圆
        .更新实现相关属性实现圆周运动.